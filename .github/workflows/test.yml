name: Test

on:
  push:

jobs:
  one-step:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-go@v3.1.0
        with:
          go-version-file: go.mod

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Test tests1
        run: |
          go test ./tests1 -json > tests1.out || ERROR="true"
          cat ./tests1.out
          [[ "$ERROR" == "true" ]] && cat ./tests1.out | go run ./test_parser.go >> $GITHUB_STEP_SUMMARY
          [[ "$ERROR" == "true" ]] && exit 1

  two-steps:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-go@v3.1.0
        with:
          go-version-file: go.mod

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Test tests2
        run: |
          go test ./tests2 -json > tests2.out || ERROR="true"
          cat ./tests2.out
          [[ "$ERROR" == "true" ]] && cat ./tests2.out | go run ./test_parser.go >> $GITHUB_STEP_SUMMARY
          [[ "$ERROR" == "true" ]] && exit 1

#      - name: Test
#        id: test
#        run: |
#          status=0
#          test2json=''"$(go test ./... -json)"'' || status=1
#
#          echo 'TEST2JSON<<EOF' >> $GITHUB_ENV
#          echo ''"$test2json"'' >> $GITHUB_ENV
#          echo 'EOF' >> $GITHUB_ENV
#
#          echo '${{ env.TEST2JSON }}'
#
#          [ $status -eq 0 ] && echo "passed" || echo "failed" ; exit 1
#
#      - name: Summary
#        if: always()
#        run: |
#          echo '${{ env.TEST2JSON }}' | go run ./test_parser.go >> $GITHUB_STEP_SUMMARY
#          echo $GITHUB_STEP_SUMMARY
